package com.mercadolibre.apps.sim

import com.mercadolibre.apps.sim.data.bo.imports.meli.Category

import groovyx.net.http.HTTPBuilder
import groovyx.net.http.ContentType
import net.sf.json.JSONArray


class CategoryService {

  static transactional = false

  /**
   * Test category validity by its id and name
   * @param categoryId
   * @return
   */
  Boolean isValidCategory(String categoryId) {
    Boolean valid = false

    def builder = new HTTPBuilder("https://api.mercadolibre.com")

    try {
      builder.contentType = ContentType.JSON
      builder.get(path: "/categories/${categoryId}") { resp, json ->
        valid = (resp.status == 200 && json['id'] && json['name'] && json['total_items_in_this_category'] > 0)
      }
    }
    catch (Exception ex) {
      if (ex?.message == 'Not Found') {
        valid = false
        log.warn "Category ${categoryId} not found !!"
      }
      else {
        log.error ex.message, ex
      }
    }

    return valid
  }


  /**
   * Turn the Meli category into a domain object
   *
   * @param categoryId
   * @return Return an object if the ML Category is found, null if not
   */
  Category getCategory(String categoryId) {
    Boolean valid
    Category aCategory

    def builder = new HTTPBuilder("https://v1.api.mercadolibre.com")
    try {
      builder.contentType = ContentType.JSON
      builder.get(path: "/categories/${categoryId}") { resp, json ->
        valid = (resp.status == 200 && json['id'] && json['name'])
        if (valid) {
          aCategory = new Category(meliId: json['id'], name: json['name'])
        }
      }
    }
    catch (Exception ex) {
      if (ex?.message == 'Not Found') {
        valid = false
        log.warn "Category ${categoryId} not found !!"
      }
      else {
        log.error ex.message, ex
      }
    }

    if (valid) {
      return aCategory
    }
    else {
      return null
    }
  }

  /**
   * Test category validity by its id and name
   * @param categoryId
   * @return
   */
  Boolean isFunkyFashionFootwearCategory(String categoryId) {
    Boolean isFunky = false

    def builder = new HTTPBuilder("https://api.mercadolibre.com")
    try {
      builder.contentType = ContentType.JSON
      builder.get(path: "/categories/${categoryId}/attributes") { resp, json ->
        isFunky = (resp.status == 200 && !(json as JSONArray).isEmpty())
      }
    }
    catch (Exception ex) {
      log.error ex.message, ex
    }
    return isFunky
  }


  /**
   * Search by category id instead of query string
   * @param siteId
   * @param friendlyCategoryId
   * @param limit
   * @param offset
   * @return
   */
  List findAllItemsByCategoryId(String siteId, String friendlyCategoryId, Integer limit = 200, Integer offset = 0) {
    def itemListings = []

    withHttp(uri: globalConfigService.get("config.apiBaseURL")) {
      def responseData = get(path: "/sites/${siteId}/search",
          query: [category: friendlyCategoryId, limit: limit, offset: offset, max: limit])
      assert responseData instanceof net.sf.json.JSONObject

      responseData['results'].eachWithIndex() { item, idx ->
        items.add(item['id'])
      }
    }
    return items
  }


  /**
   * Assuming category count is zero prior to calling us - will load the entire tree
   * /site/MLA/categories/all
   *
   * @return number of categories loaded
   */
  Integer loadMeliCategories() {
    String aLine

    BufferedReader bufferedReader = new BufferedReader(new StringReader(MeliFlatCategories.categoryIds))
    while ( (aLine = bufferedReader.readLine()) != null ) {
      Category cat =
        getCategory(aLine.trim())

      if (cat?.save(flush: true)) {
        log.info "Saved ${cat}"
      }
    }
  }

}


final class MeliFlatCategories {
  def static categoryIds =
"""MLA9997
MLA78884
MLA44393
MLA5725
MLA4711
MLA1772
MLA86379
MLA11066
MLA11090
MLA86350
MLA86351
MLA86374
MLA86352
MLA4712
MLA61175
MLA86435
MLA86432
MLA86442
MLA86441
MLA86439
MLA99246
MLA86440
MLA86438
MLA86437
MLA86434
MLA86436
MLA86433
MLA61213
MLA86637
MLA86638
MLA86639
MLA86640
MLA86641
MLA99247
MLA86642
MLA86643
MLA86644
MLA86645
MLA86646
MLA86647
MLA61214
MLA86648
MLA86649
MLA86650
MLA86651
MLA86652
MLA99248
MLA86653
MLA86654
MLA86655
MLA86656
MLA86657
MLA86658
MLA61215
MLA86670
MLA86671
MLA86672
MLA86673
MLA86674
MLA99250
MLA86675
MLA86676
MLA86677
MLA86678
MLA86679
MLA86680
MLA61174
MLA86659
MLA86660
MLA86661
MLA86662
MLA86663
MLA99249
MLA86664
MLA86665
MLA86666
MLA86667
MLA86668
MLA86669
MLA86380
MLA22297
MLA11076
MLA86376
MLA86377
MLA61160
MLA61217
MLA61161
MLA61216
MLA59863
MLA61162
MLA61176
MLA86375
MLA22204
MLA86381
MLA86378
MLA86371
MLA3931
MLA22296
MLA22298
MLA61249
MLA22281
MLA1771
MLA22676
MLA45551
MLA61247
MLA61138
MLA61135
MLA61136
MLA61233
MLA61229
MLA61139
MLA61140
MLA61137
MLA61230
MLA61141
MLA86372
MLA86373
MLA86382
MLA86384
MLA86385
MLA86383
MLA22729
MLA86977
MLA45502
MLA61231
MLA61143
MLA61142
MLA45503
MLA22687
MLA86974
MLA61144
MLA61145
MLA22655
MLA61232
MLA45504
MLA3933
MLA45529
MLA61234
MLA61146
MLA61147
MLA61148
MLA61149
MLA61235
MLA61236
MLA61150
MLA45552
MLA45518
MLA61237
MLA45557
MLA3934
MLA61239
MLA61179
MLA61248
MLA61181
MLA61151
MLA46611
MLA61178
MLA61238
MLA61240
MLA22280
MLA3935
MLA46675
MLA61180
MLA46640
MLA61152
MLA45558
MLA45559
MLA86976
MLA61153
MLA5756
MLA3936
MLA86975
MLA86979
MLA46641
MLA45560
MLA72300
MLA61154
MLA86978
MLA61155
MLA22689
MLA5671
MLA6070
MLA22205
MLA53238
MLA22282
MLA22206
MLA6520
MLA86014
MLA86346
MLA45523
MLA45542
MLA72284
MLA72286
MLA72285
MLA60634
MLA72291
MLA72281
MLA72282
MLA72279
MLA72290
MLA72280
MLA72283
MLA72287
MLA72289
MLA72288
MLA86029
MLA2237
MLA60595
MLA86030
MLA60597
MLA60596
MLA45905
MLA86361
MLA86347
MLA86024
MLA86043
MLA86044
MLA86031
MLA86015
MLA2219
MLA63657
MLA45530
MLA45537
MLA45516
MLA45511
MLA45531
MLA45532
MLA45547
MLA86016
MLA72278
MLA2229
MLA45543
MLA45751
MLA60570
MLA60586
MLA45752
MLA45753
MLA86034
MLA60578
MLA45754
MLA45755
MLA45756
MLA60659
MLA45757
MLA45544
MLA45758
MLA60571
MLA60587
MLA45759
MLA45760
MLA86035
MLA60579
MLA45761
MLA45762
MLA45763
MLA60660
MLA45764
MLA75214
MLA75215
MLA75230
MLA75232
MLA75216
MLA75217
MLA86036
MLA75231
MLA75225
MLA75226
MLA75227
MLA75229
MLA75228
MLA45545
MLA45793
MLA60572
MLA60588
MLA45794
MLA45795
MLA86042
MLA60580
MLA45796
MLA45797
MLA45798
MLA60661
MLA45799
MLA45507
MLA45765
MLA60573
MLA60589
MLA45766
MLA45767
MLA86037
MLA60581
MLA45768
MLA45769
MLA45770
MLA60662
MLA45771
MLA45535
MLA45772
MLA60574
MLA60590
MLA45773
MLA45774
MLA86038
MLA60582
MLA45775
MLA45776
MLA45777
MLA60663
MLA45778
MLA45513
MLA45779
MLA60575
MLA60591
MLA45780
MLA45781
MLA86039
MLA60583
MLA45782
MLA45783
MLA45784
MLA60664
MLA45785
MLA45505
MLA45786
MLA60576
MLA60592
MLA45787
MLA45788
MLA86040
MLA60584
MLA45789
MLA45790
MLA45791
MLA60665
MLA45792
MLA45526
MLA45656
MLA60577
MLA60593
MLA45657
MLA45659
MLA86041
MLA60585
MLA45693
MLA45692
MLA45658
MLA60666
MLA45655
MLA86025
MLA86045
MLA6651
MLA1747
MLA3173
MLA60610
MLA60609
MLA60608
MLA60667
MLA22295
MLA85919
MLA22222
MLA45548
MLA60612
MLA60668
MLA60611
MLA60613
MLA60670
MLA60669
MLA85986
MLA45515
MLA85987
MLA85970
MLA85988
MLA85962
MLA85969
MLA45549
MLA60614
MLA60619
MLA60615
MLA60671
MLA85961
MLA45536
MLA45510
MLA85971
MLA85973
MLA85989
MLA85972
MLA85963
MLA45514
MLA60621
MLA60623
MLA60624
MLA60620
MLA60622
MLA60616
MLA31156
MLA2220
MLA60672
MLA60617
MLA60618
MLA60564
MLA60673
MLA63455
MLA63421
MLA60625
MLA2221
MLA22273
MLA60626
MLA60598
MLA60599
MLA60600
MLA60627
MLA45520
MLA85923
MLA85917
MLA85921
MLA85918
MLA85920
MLA85922
MLA4861
MLA7252
MLA60601
MLA85996
MLA85993
MLA85991
MLA85997
MLA85992
MLA85990
MLA60652
MLA60604
MLA60603
MLA60602
MLA6980
MLA60629
MLA60605
MLA60654
MLA60653
MLA60628
MLA86844
MLA5319
MLA85945
MLA85946
MLA85947
MLA85948
MLA85949
MLA85950
MLA85951
MLA85952
MLA85953
MLA85954
MLA85955
MLA85956
MLA85957
MLA85959
MLA7250
MLA60927
MLA61011
MLA61012
MLA60922
MLA61013
MLA60926
MLA61014
MLA60985
MLA60923
MLA60924
MLA60887
MLA60925
MLA60986
MLA85932
MLA85933
MLA85934
MLA85974
MLA85975
MLA85976
MLA85977
MLA85978
MLA85979
MLA85980
MLA85981
MLA85982
MLA85983
MLA85985
MLA60565
MLA86401
MLA85928
MLA86402
MLA85929
MLA85930
MLA86403
MLA86404
MLA85926
MLA85924
MLA85931
MLA86405
MLA86406
MLA85925
MLA7248
MLA60991
MLA60931
MLA60983
MLA60959
MLA60960
MLA60886
MLA60992
MLA60961
MLA60987
MLA60984
MLA60990
MLA60988
MLA60943
MLA7254
MLA60963
MLA60977
MLA60928
MLA60929
MLA60930
MLA60892
MLA60939
MLA60891
MLA60993
MLA60890
MLA60995
MLA60996
MLA60994
MLA5323
MLA61002
MLA61010
MLA60997
MLA60998
MLA60949
MLA60950
MLA61003
MLA60905
MLA60903
MLA60904
MLA61000
MLA61001
MLA60999
MLA60900
MLA86407
MLA61163
MLA86408
MLA61156
MLA61157
MLA86409
MLA86410
MLA61164
MLA61158
MLA61205
MLA86411
MLA86412
MLA61159
MLA60954
MLA86413
MLA61167
MLA86414
MLA61165
MLA61166
MLA86425
MLA86426
MLA61184
MLA61168
MLA61206
MLA86427
MLA86428
MLA61210
MLA7259
MLA60964
MLA60906
MLA60907
MLA60908
MLA60893
MLA60912
MLA60913
MLA60910
MLA60909
MLA60894
MLA60895
MLA60896
MLA60911
MLA6977
MLA60968
MLA60914
MLA60965
MLA60966
MLA60915
MLA60948
MLA60951
MLA60967
MLA60916
MLA60917
MLA60919
MLA60947
"""
}